////
// Автор це Богданович Давид Когут Прихожденко та Організація Цілі та Організація Організацій
////

взяти визначення ./КД;

секція КД {
  місцева дія отримати_символ_КД_з_Ю32(символ_Ю32: п32, вихід: адреса<п8>): логічне {
    якщо символ_Ю32 == відповідні_символи_юнікоду::НІЩО {
      вихід[0] = символи::НІЩО;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_1 {
      вихід[0] = символи::СПЕЦ_СИМВОЛ_1;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_2 {
      вихід[0] = символи::СПЕЦ_СИМВОЛ_2;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_3 {
      вихід[0] = символи::СПЕЦ_СИМВОЛ_3;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_4 {
      вихід[0] = символи::СПЕЦ_СИМВОЛ_4;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МІЖРЯД {
      вихід[0] = символи::МІЖРЯД;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МІЖСЛОВО {
      вихід[0] = символи::МІЖСЛОВО;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗНАК_ОКЛИКУ {
      вихід[0] = символи::ЗНАК_ОКЛИКУ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДВОЛАПКА {
      вихід[0] = символи::ДВОЛАПКА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::РЕШІТКА {
      вихід[0] = символи::РЕШІТКА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАТЕРІЯ {
      вихід[0] = символи::МАТЕРІЯ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ГРИВНЯ {
      вихід[0] = символи::ГРИВНЯ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДСОТОК {
      вихід[0] = символи::ВІДСОТОК;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::АМПЕРСАНТ {
      вихід[0] = символи::АМПЕРСАНТ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ОДНОЛАПКА {
      вихід[0] = символи::ОДНОЛАПКА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДКРИТА_ДУГА {
      вихід[0] = символи::ВІДКРИТА_ДУГА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗАКРИТА_ДУГА {
      вихід[0] = символи::ЗАКРИТА_ДУГА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗІРОЧКА {
      вихід[0] = символи::ЗІРОЧКА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПЛЮС {
      вихід[0] = символи::ПЛЮС;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КОМА {
      вихід[0] = символи::КОМА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МІНУС {
      вихід[0] = символи::МІНУС;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КРАПКА {
      вихід[0] = символи::КРАПКА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::КОСА {
      вихід[0] = символи::КОСА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::НУЛЬ {
      вихід[0] = символи::НУЛЬ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ОДИН {
      вихід[0] = символи::ОДИН;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДВА {
      вихід[0] = символи::ДВА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ТРИ {
      вихід[0] = символи::ТРИ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЧОТИРИ {
      вихід[0] = символи::ЧОТИРИ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПʼЯТЬ {
      вихід[0] = символи::ПʼЯТЬ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ШІСТЬ {
      вихід[0] = символи::ШІСТЬ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::СІМ {
      вихід[0] = символи::СІМ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІСІМ {
      вихід[0] = символи::ВІСІМ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДЕВʼЯТЬ {
      вихід[0] = символи::ДЕВʼЯТЬ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ДВОКРАПКА {
      вихід[0] = символи::ДВОКРАПКА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МЕНШЕ {
      вихід[0] = символи::МЕНШЕ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::РІВНО {
      вихід[0] = символи::РІВНО;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::БІЛЬШЕ {
      вихід[0] = символи::БІЛЬШЕ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗНАК_ПИТАННЯ {
      вихід[0] = символи::ЗНАК_ПИТАННЯ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::РАВЛИК {
      вихід[0] = символи::РАВЛИК;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДКРИТА_КВАДРАТНА_ДУГА {
      вихід[0] = символи::ВІДКРИТА_КВАДРАТНА_ДУГА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗАКРИТА_КВАДРАТНА_ДУГА {
      вихід[0] = символи::ЗАКРИТА_КВАДРАТНА_ДУГА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПІРАМІДКА {
      вихід[0] = символи::ПІРАМІДКА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВІДКРИТА_ФІГУРНА_ДУГА {
      вихід[0] = символи::ВІДКРИТА_ФІГУРНА_ДУГА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПРЯМА {
      вихід[0] = символи::ПРЯМА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ЗАКРИТА_ФІГУРНА_ДУГА {
      вихід[0] = символи::ЗАКРИТА_ФІГУРНА_ДУГА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ТИЛЬДА {
      вихід[0] = символи::ТИЛЬДА;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ПАРАГРАФ {
      вихід[0] = символи::ПАРАГРАФ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::АПОСТРОФ {
      вихід[0] = символи::АПОСТРОФ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_А {
      вихід[0] = символи::ВЕЛИКА_БУКВА_А;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Б {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Б;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_В {
      вихід[0] = символи::ВЕЛИКА_БУКВА_В;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Г {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Г;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Д {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Д;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Е {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Е;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Є {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Є;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ж {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ж;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_З {
      вихід[0] = символи::ВЕЛИКА_БУКВА_З;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_И {
      вихід[0] = символи::ВЕЛИКА_БУКВА_И;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_І {
      вихід[0] = символи::ВЕЛИКА_БУКВА_І;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ї {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ї;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Й {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Й;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ґ {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ґ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_К {
      вихід[0] = символи::ВЕЛИКА_БУКВА_К;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Л {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Л;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_М {
      вихід[0] = символи::ВЕЛИКА_БУКВА_М;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Н {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Н;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_О {
      вихід[0] = символи::ВЕЛИКА_БУКВА_О;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_П {
      вихід[0] = символи::ВЕЛИКА_БУКВА_П;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Р {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Р;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_С {
      вихід[0] = символи::ВЕЛИКА_БУКВА_С;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Т {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Т;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_У {
      вихід[0] = символи::ВЕЛИКА_БУКВА_У;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ф {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ф;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Х {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Х;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ц {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ц;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ч {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ч;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ш {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ш;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Щ {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Щ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ь {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ь;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ю {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Ю;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Я {
      вихід[0] = символи::ВЕЛИКА_БУКВА_Я;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_а {
      вихід[0] = символи::МАЛА_БУКВА_а;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_б {
      вихід[0] = символи::МАЛА_БУКВА_б;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_в {
      вихід[0] = символи::МАЛА_БУКВА_в;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_г {
      вихід[0] = символи::МАЛА_БУКВА_г;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_д {
      вихід[0] = символи::МАЛА_БУКВА_д;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_е {
      вихід[0] = символи::МАЛА_БУКВА_е;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_є {
      вихід[0] = символи::МАЛА_БУКВА_є;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ж {
      вихід[0] = символи::МАЛА_БУКВА_ж;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_з {
      вихід[0] = символи::МАЛА_БУКВА_з;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_и {
      вихід[0] = символи::МАЛА_БУКВА_и;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_і {
      вихід[0] = символи::МАЛА_БУКВА_і;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ї {
      вихід[0] = символи::МАЛА_БУКВА_ї;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_й {
      вихід[0] = символи::МАЛА_БУКВА_й;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ґ {
      вихід[0] = символи::МАЛА_БУКВА_ґ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_к {
      вихід[0] = символи::МАЛА_БУКВА_к;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_л {
      вихід[0] = символи::МАЛА_БУКВА_л;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_м {
      вихід[0] = символи::МАЛА_БУКВА_м;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_н {
      вихід[0] = символи::МАЛА_БУКВА_н;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_о {
      вихід[0] = символи::МАЛА_БУКВА_о;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_п {
      вихід[0] = символи::МАЛА_БУКВА_п;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_р {
      вихід[0] = символи::МАЛА_БУКВА_р;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_с {
      вихід[0] = символи::МАЛА_БУКВА_с;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_т {
      вихід[0] = символи::МАЛА_БУКВА_т;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_у {
      вихід[0] = символи::МАЛА_БУКВА_у;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ф {
      вихід[0] = символи::МАЛА_БУКВА_ф;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_х {
      вихід[0] = символи::МАЛА_БУКВА_х;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ц {
      вихід[0] = символи::МАЛА_БУКВА_ц;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ч {
      вихід[0] = символи::МАЛА_БУКВА_ч;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ш {
      вихід[0] = символи::МАЛА_БУКВА_ш;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_щ {
      вихід[0] = символи::МАЛА_БУКВА_щ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ь {
      вихід[0] = символи::МАЛА_БУКВА_ь;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_ю {
      вихід[0] = символи::МАЛА_БУКВА_ю;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_БУКВА_я {
      вихід[0] = символи::МАЛА_БУКВА_я;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ё {
      вихід[0] = символи::ВЕЛИКА_СПЕЦ_БУКВА_Ё;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ъ {
      вихід[0] = символи::ВЕЛИКА_СПЕЦ_БУКВА_Ъ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ы {
      вихід[0] = символи::ВЕЛИКА_СПЕЦ_БУКВА_Ы;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Э {
      вихід[0] = символи::ВЕЛИКА_СПЕЦ_БУКВА_Э;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ё {
      вихід[0] = символи::МАЛА_СПЕЦ_БУКВА_ё;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ъ {
      вихід[0] = символи::МАЛА_СПЕЦ_БУКВА_ъ;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ы {
      вихід[0] = символи::МАЛА_СПЕЦ_БУКВА_ы;
      вернути так;
    }
    якщо символ_Ю32 == відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_э {
      вихід[0] = символи::МАЛА_СПЕЦ_БУКВА_э;
      вернути так;
    }
    вернути ні;
  }

  місцева дія перекодувати_з_Ю8(вхід: адреса<п8>, розмір: позитивне, вихід: адреса<п8>): позитивне {
    змінна ціль розмір_виходу: позитивне = 0;
    змінна ціль п: позитивне = 0;
    поки п < розмір {
      ціль перший_байт = вхід[п];
      ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
      якщо розмір_символа == 1 {
        ціль символ_КД: п8 = 0;
        ціль успіх_отримання_КД_з_Ю32 = отримати_символ_КД_з_Ю32(перший_байт як п32, символ_КД::адреса);
        якщо успіх_отримання_КД_з_Ю32 == ні {
          вернути 0;
        }
        вихід[розмір_виходу] = символ_КД;
        розмір_виходу += 1;
      } інакше якщо розмір_символа == 2 {
        п += 1;
        ціль другий_байт = вхід[п];
        ціль символ_Ю16 = п16((п16(перший_байт & 31) << 6) | п16(другий_байт & 63));
        ціль символ_КД: п8 = 0;
        ціль успіх_отримання_КД_з_Ю32 = отримати_символ_КД_з_Ю32(символ_Ю16 як п32, символ_КД::адреса);
        якщо успіх_отримання_КД_з_Ю32 == ні {
          вернути 0;
        }
        вихід[розмір_виходу] = символ_КД;
        розмір_виходу += 1;
      } інакше якщо розмір_символа == 3 {
        п += 1;
        ціль другий_байт = вхід[п];
        п += 1;
        ціль третій_байт = вхід[п];
        ціль символ_Ю32 = п32((п32(перший_байт & 15) << 12) | (п32(другий_байт & 63) << 6) | п32(третій_байт & 63));
        ціль символ_КД: п8 = 0;
        ціль успіх_отримання_КД_з_Ю32 = отримати_символ_КД_з_Ю32(символ_Ю32, символ_КД::адреса);
        якщо успіх_отримання_КД_з_Ю32 == ні {
          вернути 0;
        }
        вихід[розмір_виходу] = символ_КД;
        розмір_виходу += 1;
      } інакше {
        вернути 0;
      }
      п += 1;
    }
    вернути розмір_виходу;
  }

  місцева дія отримати_символ_Ю_з_КД(символ_КД: п8, вихід_першого_байта: адреса<п8>, вихід_другого_байта: адреса<п8>, вихід_третього_байта: адреса<п8>): п8 {
    якщо символ_КД == символи::НІЩО {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::НІЩО;
      вернути 1;
    }
    якщо символ_КД == символи::СПЕЦ_СИМВОЛ_1 {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_1;
      вернути 1;
    }
    якщо символ_КД == символи::СПЕЦ_СИМВОЛ_2 {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_2;
      вернути 1;
    }
    якщо символ_КД == символи::СПЕЦ_СИМВОЛ_3 {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_3;
      вернути 1;
    }
    якщо символ_КД == символи::СПЕЦ_СИМВОЛ_4 {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::СПЕЦ_СИМВОЛ_4;
      вернути 1;
    }
    якщо символ_КД == символи::МІЖРЯД {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::МІЖРЯД;
      вернути 1;
    }
    якщо символ_КД == символи::МІЖСЛОВО {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::МІЖСЛОВО;
      вернути 1;
    }
    якщо символ_КД == символи::ЗНАК_ОКЛИКУ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ЗНАК_ОКЛИКУ;
      вернути 1;
    }
    якщо символ_КД == символи::ДВОЛАПКА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ДВОЛАПКА;
      вернути 1;
    }
    якщо символ_КД == символи::РЕШІТКА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::РЕШІТКА;
      вернути 1;
    }
    якщо символ_КД == символи::МАТЕРІЯ {
      вихід_першого_байта[0] = п8(224п32 | (п32(відповідні_символи_юнікоду::МАТЕРІЯ) >> 12));
      вихід_другого_байта[0] = п8(128п32 | ((п32(відповідні_символи_юнікоду::МАТЕРІЯ) >> 6) & 63));
      вихід_третього_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАТЕРІЯ) & 63));
      вернути 3;
    }
    якщо символ_КД == символи::ГРИВНЯ {
      вихід_першого_байта[0] = п8(224п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 12));
      вихід_другого_байта[0] = п8(128п32 | ((п32(відповідні_символи_юнікоду::ГРИВНЯ) >> 6) & 63));
      вихід_третього_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ГРИВНЯ) & 63));
      вернути 3;
    }
    якщо символ_КД == символи::ВІДСОТОК {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ВІДСОТОК;
      вернути 1;
    }
    якщо символ_КД == символи::АМПЕРСАНТ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::АМПЕРСАНТ;
      вернути 1;
    }
    якщо символ_КД == символи::ОДНОЛАПКА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ОДНОЛАПКА;
      вернути 1;
    }
    якщо символ_КД == символи::ВІДКРИТА_ДУГА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ВІДКРИТА_ДУГА;
      вернути 1;
    }
    якщо символ_КД == символи::ЗАКРИТА_ДУГА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ЗАКРИТА_ДУГА;
      вернути 1;
    }
    якщо символ_КД == символи::ЗІРОЧКА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ЗІРОЧКА;
      вернути 1;
    }
    якщо символ_КД == символи::ПЛЮС {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ПЛЮС;
      вернути 1;
    }
    якщо символ_КД == символи::КОМА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::КОМА;
      вернути 1;
    }
    якщо символ_КД == символи::МІНУС {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::МІНУС;
      вернути 1;
    }
    якщо символ_КД == символи::КРАПКА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::КРАПКА;
      вернути 1;
    }
    якщо символ_КД == символи::КОСА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::КОСА;
      вернути 1;
    }
    якщо символ_КД == символи::НУЛЬ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::НУЛЬ;
      вернути 1;
    }
    якщо символ_КД == символи::ОДИН {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ОДИН;
      вернути 1;
    }
    якщо символ_КД == символи::ДВА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ДВА;
      вернути 1;
    }
    якщо символ_КД == символи::ТРИ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ТРИ;
      вернути 1;
    }
    якщо символ_КД == символи::ЧОТИРИ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ЧОТИРИ;
      вернути 1;
    }
    якщо символ_КД == символи::ПʼЯТЬ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ПʼЯТЬ;
      вернути 1;
    }
    якщо символ_КД == символи::ШІСТЬ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ШІСТЬ;
      вернути 1;
    }
    якщо символ_КД == символи::СІМ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::СІМ;
      вернути 1;
    }
    якщо символ_КД == символи::ВІСІМ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ВІСІМ;
      вернути 1;
    }
    якщо символ_КД == символи::ДЕВʼЯТЬ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ДЕВʼЯТЬ;
      вернути 1;
    }
    якщо символ_КД == символи::ДВОКРАПКА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ДВОКРАПКА;
      вернути 1;
    }
    якщо символ_КД == символи::МЕНШЕ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::МЕНШЕ;
      вернути 1;
    }
    якщо символ_КД == символи::РІВНО {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::РІВНО;
      вернути 1;
    }
    якщо символ_КД == символи::БІЛЬШЕ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::БІЛЬШЕ;
      вернути 1;
    }
    якщо символ_КД == символи::ЗНАК_ПИТАННЯ {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ЗНАК_ПИТАННЯ;
      вернути 1;
    }
    якщо символ_КД == символи::РАВЛИК {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::РАВЛИК;
      вернути 1;
    }
    якщо символ_КД == символи::ВІДКРИТА_КВАДРАТНА_ДУГА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ВІДКРИТА_КВАДРАТНА_ДУГА;
      вернути 1;
    }
    якщо символ_КД == символи::ЗАКРИТА_КВАДРАТНА_ДУГА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ЗАКРИТА_КВАДРАТНА_ДУГА;
      вернути 1;
    }
    якщо символ_КД == символи::ПІРАМІДКА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ПІРАМІДКА;
      вернути 1;
    }
    якщо символ_КД == символи::ВІДКРИТА_ФІГУРНА_ДУГА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ВІДКРИТА_ФІГУРНА_ДУГА;
      вернути 1;
    }
    якщо символ_КД == символи::ПРЯМА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ПРЯМА;
      вернути 1;
    }
    якщо символ_КД == символи::ЗАКРИТА_ФІГУРНА_ДУГА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ЗАКРИТА_ФІГУРНА_ДУГА;
      вернути 1;
    }
    якщо символ_КД == символи::ТИЛЬДА {
      вихід_першого_байта[0] = відповідні_символи_юнікоду::ТИЛЬДА;
      вернути 1;
    }
    якщо символ_КД == символи::ПАРАГРАФ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ПАРАГРАФ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ПАРАГРАФ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::АПОСТРОФ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::АПОСТРОФ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::АПОСТРОФ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_А {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_А) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_А) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Б {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Б) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Б) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_В {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_В) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_В) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Г {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Г) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Г) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Д {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Д) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Д) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Е {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Е) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Е) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Є {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Є) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Є) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ж {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ж) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ж) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_З {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_З) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_З) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_И {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_И) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_И) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_І {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_І) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_І) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ї {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ї) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ї) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Й {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Й) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Й) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ґ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ґ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ґ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_К {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_К) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_К) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Л {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Л) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Л) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_М {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_М) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_М) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Н {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Н) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Н) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_О {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_О) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_О) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_П {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_П) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_П) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Р {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Р) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Р) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_С {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_С) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_С) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Т {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Т) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Т) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_У {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_У) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_У) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ф {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ф) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ф) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Х {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Х) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Х) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ц {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ц) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ц) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ч {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ч) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ч) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ш {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ш) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ш) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Щ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Щ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Щ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ь {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ь) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ь) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Ю {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ю) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Ю) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_БУКВА_Я {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Я) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_БУКВА_Я) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_а {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_а) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_а) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_б {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_б) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_б) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_в {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_в) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_в) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_г {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_г) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_г) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_д {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_д) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_д) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_е {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_е) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_е) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_є {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_є) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_є) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ж {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ж) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ж) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_з {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_з) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_з) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_и {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_и) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_и) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_і {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_і) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_і) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ї {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ї) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ї) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_й {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_й) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_й) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ґ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ґ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ґ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_к {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_к) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_к) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_л {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_л) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_л) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_м {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_м) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_м) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_н {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_н) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_н) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_о {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_о) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_о) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_п {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_п) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_п) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_р {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_р) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_р) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_с {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_с) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_с) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_т {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_т) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_т) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_у {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_у) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_у) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ф {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ф) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ф) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_х {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_х) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_х) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ц {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ц) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ц) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ч {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ч) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ч) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ш {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ш) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ш) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_щ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_щ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_щ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ь {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ь) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ь) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_ю {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ю) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_ю) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_БУКВА_я {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_я) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_БУКВА_я) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Ё {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ё) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ё) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Ъ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ъ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ъ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Ы {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ы) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Ы) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::ВЕЛИКА_СПЕЦ_БУКВА_Э {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Э) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::ВЕЛИКА_СПЕЦ_БУКВА_Э) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_ё {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ё) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ё) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_ъ {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ъ) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ъ) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_ы {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ы) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_ы) & 63));
      вернути 2;
    }
    якщо символ_КД == символи::МАЛА_СПЕЦ_БУКВА_э {
      вихід_першого_байта[0] = п8(192п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_э) >> 6));
      вихід_другого_байта[0] = п8(128п32 | (п32(відповідні_символи_юнікоду::МАЛА_СПЕЦ_БУКВА_э) & 63));
      вернути 2;
    }
    вернути 0;
  }

  місцева дія перекодувати_в_Ю8(вхід: адреса<п8>, розмір: позитивне, вихід: адреса<п8>): позитивне {
    змінна ціль розмір_виходу: позитивне = 0;
    змінна ціль п: позитивне = 0;
    поки п < розмір {
      ціль символ_КД = вхід[п];
      ціль перший_байт: п8;
      ціль другий_байт: п8;
      ціль третій_байт: п8;
      ціль кількість_записаних_байтів_отримання_Ю8_з_КД = отримати_символ_Ю_з_КД(символ_КД, перший_байт::адреса, другий_байт::адреса, третій_байт::адреса);
      якщо кількість_записаних_байтів_отримання_Ю8_з_КД == 0 {
        вернути 0;
      }
      вихід[розмір_виходу] = перший_байт;
      розмір_виходу += 1;
      якщо кількість_записаних_байтів_отримання_Ю8_з_КД > 1 {
        вихід[розмір_виходу] = другий_байт;
        розмір_виходу += 1;
      }
      якщо кількість_записаних_байтів_отримання_Ю8_з_КД > 2 {
        вихід[розмір_виходу] = третій_байт;
        розмір_виходу += 1;
      }
      п += 1;
    }
    вернути розмір_виходу;
  }

  місцева дія дізнатись_розмір_символа_юнікоду(перший_байт: п8): п8 {
    якщо (перший_байт & 128) == 0 {
      вернути 1;
    }
    якщо (перший_байт & 224) == 192 {
      вернути 2;
    }
    якщо (перший_байт & 240) == 224 {
      вернути 3;
    }
    якщо (перший_байт & 248) == 240 {
      вернути 4;
    }
    вернути 0;
  }
}